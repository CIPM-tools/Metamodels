grammar org.xtext.lua.Lua
	hidden(WS, COMMENT)

// 	Now inlined because of INT not being matchable
//	with org.eclipse.xtext.common.Terminals 
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore
generate lua "http://www.xtext.org/lua/Lua"

Chunk:
	block=Block;

// We introduce some typen into the inheritence hiearchy (uses multiple inheritence)
Refble:
	Referenceable
	| Argument
	| Field_AddEntryToTable
	| Statement_Function_Declaration;

// The synthetic are only used for merging resources before propagation.
// BEGIN SYNTHETIC RULES
NamedChunk:
	'--namedchunk@' name=LUA_STRING
	chunk=Chunk;

Component:
	{Component}
	'component:'
	name=LUA_STRING
	=>'--chunks'
	(=>chunks+=NamedChunk)*;

ComponentSet:
	{ComponentSet}
	'components:'
	(=>components+=Component)*;

// END SYNTHETIC RULES
Block:
	{Block}
	(statements+=Statement (=>';')?)*
	(=>returnValue=LastStatement (=>';')?)?;

// ****************************************************
// LAST STATEMENT
// ****************************************************
LastStatement:
	LastStatement_Return | LastStatement_Break | LastStatement_Return_WithValue;

// The return statement is used to return values from a function or a chunk
LastStatement_Return:
	{LastStatement_Return}
	'return';

LastStatement_Return_WithValue:
	'return' returnValues+=Expression (',' returnValues+=Expression)*;

// The break statement is used to terminate the execution of a while, repeat, or for loop, skipping to the next statement after the loop
LastStatement_Break:
	'break' {LastStatement_Break};

// ****************************************************
// STATEMENT
// ****************************************************
Statement:
	Statement_Block
	| Statement_While
	| Statement_Repeat
	| Statement_If_Then_Else
	| Statement_For
	| Statement_Functioncall
	| Statement_Function_Declaration
	| Statement_Assignment;

//	| Statement_TableAssignment;
// Blockwrapping statements
BlockWrapper:
	{BlockWrapper} block=Block
	| BlockWrapperWithArgs
	| Statement_Block
	| Statement_While
	| Statement_Repeat
	| Statement_If_Then_Else
	| Statement_If_Then_Else_ElseIfPart;

BlockWrapperWithArgs:
	Function
	| Statement_For;

Statement_Declaration:
	Statement_Function_Declaration
	| Statement_Assignment;

// A block can be explicitly delimited to produce a single statement. "do ... end"
Statement_Block:
	'do' block=Block 'end';

// Control structure. "while ... do ... end"
Statement_While:
	'while' expression=Expression 'do' block=Block 'end';

// Control structure. "repeat ... until ..."
Statement_Repeat:
	'repeat' block=Block 'until' expression=Expression;

// Control structure. "if ... then ... elseif ... elseif ... else ... end"
Statement_If_Then_Else:
	'if' ifExpression=Expression 'then'
	block=Block
	(elseIf+=Statement_If_Then_Else_ElseIfPart)*
	('else' elseBlock=Block)?
	'end';

Statement_If_Then_Else_ElseIfPart:
	'elseif' elseifExpression=Expression 'then' block=Block;

// The numeric for loop repeats a block of code while a control variable runs through an arithmetic progression "for ...=..., ... [,...] do ... end"
Statement_For:
	'for'
	arguments+=Argument
	(=>',' arguments+=Argument)*
	(numeric?='=' | generic?='in')
	argExpressions+=Expression
	(=>',' argExpressions+=Expression)*
	=>'do' block=Block 'end';

//    'function' name=QualifiedName function=Function 'end';
Statement_Function_Declaration:
	Statement_Local_Function_Declaration
	| Statement_Global_Function_Declaration;

Statement_Local_Function_Declaration:
	=>'local' 'function' name=LUA_NAME function=Function 'end';

Statement_Global_Function_Declaration:
	'function' name=QualifiedName function=Function 'end';

// Local variables can be declared anywhere inside a block. The declaration can include an initial assignment "local ... [= ...]"
//Statement_Local_Variable_Declaration returns MultiReferenceable: 
//    refbles+=Referenceable (=> ',' refbles+=Referenceable)*
//    (=> '=' values+=Expression (=> ',' values+=Expression)*)?;
Statement_Assignment:
	Statement_Local_Assignment
	| Statement_Global_Assignment;

// Assignment_Destination is only used in the assignments
Assignment_Destination:
	Referenceable
	| Expression_TableAccess;

Statement_Local_Assignment:
	=>'local'
	dests+=Assignment_Destination
	(=>',' dests+=Assignment_Destination)*
	(=>'=' values+=Expression (=>',' values+=Expression)*)?;

Statement_Global_Assignment:
	dests+=Assignment_Destination
	(=>',' dests+=Assignment_Destination)*
	(=>'=' values+=Expression (=>',' values+=Expression)*)?;

Statement_Functioncall:
	Expression_Functioncall
	| Expression_Import;

// TODO should this be included somewhere?
//Statement_TableAssignment:
//	tableAccess=Expression_TableAccess
//	=>'='
//	values=Expression;
// ****************************************************
// EXPRESSIONS
// ****************************************************
// Delegate to the priority chain of operators by calling the rule for the lowest priority operator
Expression:
	Expression_Or;

// Or: left associative, priority 0
Expression_Or returns Expression:
	Expression_And ('or' {Expression_Or.left=current} right=Expression_And)*;

// And: left associative, priority 1
Expression_And returns Expression:
	Expression_Compare ('and' {Expression_And.left=current} right=Expression_Compare)*;

// Comparisons: left associative, priority 2
Expression_Compare returns Expression:
	Expression_Concatenation (('>' {Expression_Larger.left=current} right=Expression_Concatenation) |
	('>=' {Expression_Larger_Equal.left=current} right=Expression_Concatenation) |
	('<' {Expression_Smaller.left=current} right=Expression_Concatenation) |
	('<=' {Expression_Smaller_Equal.left=current} right=Expression_Concatenation) |
	('==' {Expression_Equal.left=current} right=Expression_Concatenation) |
	('~=' {Expression_Not_Equal.left=current} right=Expression_Concatenation))*;

// Concatenation: right associative, priority 3
Expression_Concatenation returns Expression:
	Expression_PlusMinus ('..' {Expression_Concatenation.left=current} right=Expression_Concatenation)?;

// addition/subtraction: left associative, priority 4
Expression_PlusMinus returns Expression:
	Expression_MultiplicationDivisionModulo (('+' {Expression_Plus.left=current}
	right=Expression_MultiplicationDivisionModulo) |
	('-' {Expression_Minus.left=current} right=Expression_MultiplicationDivisionModulo))*;

// multiplication/division, left associative, priority 5
Expression_MultiplicationDivisionModulo returns Expression:
	Expression_Unary (('*' {Expression_Multiplication.left=current} right=Expression_Unary) |
	('/' {Expression_Division.left=current} right=Expression_Unary) |
	('%' {Expression_Modulo.left=current} right=Expression_Unary))*;

// Unary operators: right associative, priority 6
Expression_Unary returns Expression:
	Expression_Exponentiation |
	('not' {Expression_Negate} exp=Expression_Unary) |
	('#' {Expression_Length} exp=Expression_Unary) |
	('-' {Expression_Invert} exp=Expression_Unary);

// exponentiation: right associative, priority 7
Expression_Exponentiation returns Expression:
	Expression_Terminal
	('^' {Expression_Exponentiation.left=current} right=Expression_Exponentiation)?;

Expression_Terminal returns Expression:
	Expression_Nil |
	Expression_True |
	Expression_False |
	Expression_Number |
	Expression_VarArgs |
	Expression_String |
	Expression_Function |
	Expression_Nesting |
	Expression_VariableName |
	Expression_TableAccess |
	Expression_TableConstructor |
	Expression_Import |
	Expression_Functioncall;

Expression_Nil:
	'nil' {Expression_Nil};

Expression_True:
	'true' {Expression_True};

Expression_False:
	'false' {Expression_False};

Expression_Number:
	value=LUA_NUMBER;

Expression_VarArgs:
	'...' {Expression_VarArgs};

Expression_String hidden():
	value=LUA_STRING;

Expression_Function:
	'function' function=Function 'end';

// TODO can this returns be removed?
Expression_TableConstructor returns Expression:
	=>'{'
	{Expression_TableConstructor} (fields+=Field ((',' | ';') fields+=Field)* (',' | ';')?)?
	=>'}';

Expression_Import:
	=>'require('
	importURI=LUA_STRING
	=>')';

Expression_Functioncall:
	Expression_Functioncall_Table
	| Expression_Functioncall_Direct;

Expression_Functioncall_Direct:
	calledFunction=[Refble|QualifiedNameWithoutTableAccess]
	=>calledFunctionArgs=Functioncall_Arguments;

Expression_Functioncall_Table:
	calledTable=[Refble|QualifiedNameWithoutTableAccess]
	=>':'
	functionName=LUA_NAME
	=>calledFunctionArgs=Functioncall_Arguments;

Expression_VariableName:
	{Expression_VariableName}
	ref=[Refble|QualifiedName];

// We only allow table accesses on variables
Expression_TableAccess:
//	indexableExpression=Indexable_Expression
	indexableExpression=(Expression_VariableName)
	(=>'['
	indexExpression+=Expression
	=>']')+
	(=>':'
	functionName=LUA_NAME
	=>calledFunctionArgs=Functioncall_Arguments)?;

Expression_Nesting returns Expression:
	=>'(' Expression ')';

//Indexable_Expression:
//	Expression_VariableName
//	| Expression_Functioncall
//;
// ****************************************************
// FUNCTIONS
// ****************************************************
//Function returns BlockWrapper:
Function:
	=>'(' (arguments+=Argument (',' arguments+=Argument)* ','?)? (varArgs?='...')? ')' block=Block;

// Some syntactic sugar: strings and field can be passed as parameters without bracket
Functioncall_Arguments:
	{Functioncall_Arguments}
	((=>'(' (arguments+=Expression (',' arguments+=Expression)*)? ')') |
	(arguments+=Expression_TableConstructor) |
	(arguments+=Expression_String));

// ****************************************************
// TABLES/FIELDS
// ****************************************************
Field:
	Field_AddEntryToTable_Brackets |
	Field_AddEntryToTable |
	Field_AppendEntryToTable;

// Each field of the form "[exp1] = exp2" adds to the new table an entry with key exp1 and value exp2
Field_AddEntryToTable_Brackets:
	'[' indexExpression=Expression ']' '=' value=Expression;

// A field of the form "name = exp" is equivalent to ["name"] = exp
Field_AddEntryToTable:
	name=LUA_NAME '=' value=Expression;

// fields of the form "exp" are equivalent to [i] = exp
Field_AppendEntryToTable:
	value=Expression;

// Everything that is referenceable returns this class and uses the 'name' feature
Referenceable:
	name=QualifiedName;

Argument returns Referenceable:
	name=LUA_NAME;

QualifiedName:
	LUA_NAME (=>'.' LUA_NAME)* (=>':' LUA_NAME)?;

QualifiedNameWithoutTableAccess:
	LUA_NAME (=>'.' LUA_NAME)*;

// ****************************************************
// TERMINALS
// ****************************************************
terminal COMMENT:
	ML_COMMENT | SL_COMMENT;

terminal ML_COMMENT:
	'--' '[['->']]';

terminal SL_COMMENT:
//	(' ' | '\t')* '--' !'[' (!('\r' | '\n'))* ('\r'? '\n');
	'--' !'[' (!'\n')*;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+; // Consume all white space, tabs and new line characters

// Identifiers can be any string of letters, digits, and underscores, but mustn't begin with a digit.
terminal LUA_NAME returns ecore::EString:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

//terminal LUA_STRING returns ecore::EString:
//	("'"
//		(
//		'\\' ('a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '"' | "'" | '\\' | ('0'..'9' ('0'..'9' ('0'..'9'))))
//		| !('\\' | "'")
//		)* 
//	"'")
//	| ('"' 
//		('\\' ('a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '"' | "'" | '\\' | ('0'..'9' ('0'..'9' ('0'..'9')))) | !('\\' | '"'))* 
//	'"');
terminal LUA_STRING:
	'"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' |
	"'" ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'";

//terminal LUA_IMPORT_STRING returns ecore::EString:
//	('a'..'z'|'A'..'Z'|'_'|'-'|'/'|'.')*
//    ;
terminal LUA_NUMBER returns ecore::EDouble:
	(('0'..'9')+ ('.' ('0'..'9')+ (('E' | 'e') ('-')? ('0'..'9')+)?)?) |
	('0x' ('0'..'9' | 'a'..'f')+);

// ****************************************************
// INLINED COMMON TERMINALS
// ****************************************************
//grammar org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
//terminal INT returns ecore::EInt: ('0'..'9')+;
//terminal STRING:
//			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
//			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
//		;
//terminal ML_COMMENT : '/*' -> '*/';
//terminal SL_COMMENT : '--' !('\n'|'\r'|'[[')* ('\r'? '\n')?;
//terminal WS         : (' '|'\t'|'\r'|'\n')+;
terminal ANY_OTHER:
	.;
