/*
 * generated by Xtext 2.28.0
 */
package org.xtext.lua;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.linking.ILinkingService;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.ImportUriResolver;
import org.xtext.lua.converters.LuaValueConverterService;
import org.xtext.lua.scoping.LuaGlobalScopeProvider;
import org.xtext.lua.scoping.LuaImportUriResolver;
import org.xtext.lua.scoping.LuaLinkingService;
import org.xtext.lua.scoping.LuaQualifiedNameProvider;
import org.xtext.lua.scoping.LuaResourceDescriptionStrategy;
import org.xtext.lua.scoping.LuaScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
public class LuaRuntimeModule extends AbstractLuaRuntimeModule {
//	@Override
//	public void configure(Binder binder) {
//		super.configure(binder);
//
////		binder.bind(IDefaultResourceDescriptionStrategy.class).to(LuaResourceDescriptionStrategy.class);
////		binder.bind(ImportUriResolver.class).to(LuaImportUriResolver.class);
//	}
	
    public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
        return LuaResourceDescriptionStrategy.class;
    }
    
    public Class<? extends ImportUriResolver> bindImportUriResolver() {
        return LuaImportUriResolver.class;
    }

    @Override
    public Class<? extends IValueConverterService> bindIValueConverterService() {
        return LuaValueConverterService.class;
    }

    @Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return LuaQualifiedNameProvider.class;
	}

	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return LuaGlobalScopeProvider.class;
	}

	@Override
	public Class<? extends IScopeProvider> bindIScopeProvider() {
		return LuaScopeProvider.class;
	}

	@Override
    public Class<? extends ILinkingService> bindILinkingService() {
        return LuaLinkingService.class;
    }
}
