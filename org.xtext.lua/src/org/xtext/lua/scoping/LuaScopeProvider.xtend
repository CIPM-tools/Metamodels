/*
 * generated by Xtext 2.28.0
 */
package org.xtext.lua.scoping

import com.google.inject.Inject
import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.SimpleLocalScopeProvider
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.xtext.lua.lua.Block
import org.xtext.lua.lua.Expression_VariableName
import org.xtext.lua.lua.Referenceable

/** 
 * This class contains custom scoping description.
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class LuaScopeProvider extends SimpleLocalScopeProvider {

	@Inject
	IQualifiedNameProvider qualifiedNameProvider;
	
//	private def boolean isLocalDeclaration(Referenceable refble) {
//		return (refble.localFunction !== null || refble.localInitialValue !== null)
//	}

	private def boolean isFunctionDeclaration(EObject refble) {
		if (refble instanceof Referenceable)
			return (refble.localFunction !== null || refble.function !== null)
		return false
	}
	
	private def void ingestParentArgs(ArrayList<Referenceable> candidates, EObject parent) {
		if (parent instanceof Referenceable) {
			if (parent.localFunction !== null) {
				parent.localFunction.arguments.forall[candidates.add(it)]
				return
			}
			
			if (parent.function !== null) {
				parent.function.arguments.forall[candidates.add(it)]
				return
			}
		}
//		if (parent instanceof HasArgs) {
//			if (parent.forArgs !== null) {
//				parent.forArgs.forall[candidates.add(it)]
//			}
//		}
	}
		
	private def void ingestSibling(ArrayList<Referenceable> candidates, EObject sibling) {
		if (sibling instanceof Referenceable) {
			candidates.add(sibling)

			// Don't pull variables inside function declarations automatically into the scope
			if (!isFunctionDeclaration(sibling)) {
				EcoreUtil2.getAllContentsOfType(sibling, Referenceable).forall[
					candidates.add(it)
				]
			}
			
			
			// Is this an assignment which causes aliasing?
			if (sibling.value !== null) {
				var value = sibling.value
				if (value instanceof Expression_VariableName) {
					println(value.ref.name + " aliased to " + sibling.name)
				}
			}
		}
	}

	private def void ingestBlockExcluding(ArrayList<Referenceable> candidates, EObject excludedSibling) {
			
		var previousSibling = EcoreUtil2.getPreviousSibling(excludedSibling)
					
		// walk through statements of this block
		while (previousSibling !== null)  {
		
			// ingest this sibling and possible children, like with table constructors
			ingestSibling(candidates, previousSibling)
		
			previousSibling = EcoreUtil2.getPreviousSibling(previousSibling)
		}
	}

	// Collects all visible referenceables from the POV of `context`
	override IScope getScope(EObject context, EReference reference) {
		val candidates = new ArrayList<Referenceable>()
		val elements = newArrayList
		
		var currentSibling = context
		var forceLevelAscend = false
		
		while (currentSibling !== null) {
			// Walk up to the statement level of one block
			while (currentSibling !== null && (forceLevelAscend || !(currentSibling.eContainer instanceof Block))) {
				currentSibling = currentSibling.eContainer
				forceLevelAscend = false
			}

			// ingest another level if it exists
			if (currentSibling !== null) {

				// ingest refbles like function args, vars of a for loop, etc.
				ingestParentArgs(candidates, currentSibling)

				ingestBlockExcluding(candidates, currentSibling)
				
				// walk one level up after we have ingested the current block
				forceLevelAscend = true
			}
		}
		
		candidates.forEach[elements.add(
			EObjectDescription.create(
				qualifiedNameProvider.apply(it),
				it		
			)
		)]
		
//		Scopes::scopeFor(candidates, this.getQualifiedNameProvider, IScope::NULLSCOPE)
		new SimpleScope(IScope.NULLSCOPE, elements)
	}
}