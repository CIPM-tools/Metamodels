/*
 * generated by Xtext 2.28.0
 */
package org.xtext.lua.scoping

import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider
import org.xtext.lua.lua.Referenceable

/** 
 * This class contains custom scoping description.
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class LuaScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
	
	def boolean isLocalDeclaration(Referenceable refble) {
		return (refble.localFunction !== null || refble.localInitialValue !== null)
	}

	def boolean isFunctionDeclaration(Referenceable refble) {
		return (refble.localFunction !== null || refble.function !== null)
	}

	// Collects all visible referenceables from the POV of `context`
	override IScope getScope(EObject context, EReference reference) {
		val candidates = new ArrayList<Referenceable>()
		
		var currentSibling = context
		var EObject previousSibling
		
		
		while (currentSibling !== null)  {
			previousSibling = EcoreUtil2.getPreviousSibling(currentSibling)
			if (previousSibling !== null) {
				// childs of my sibling
				if (previousSibling instanceof Referenceable) {
					candidates.add(previousSibling)

					// Don't pull variables inside function declarations automatically into the scope
					if (!isFunctionDeclaration(previousSibling)) {
						EcoreUtil2.getAllContentsOfType(previousSibling, Referenceable).forall[
							candidates.add(it)
						]
					}
				}

				// step upwards in current tree-level
				currentSibling = previousSibling
			} else {
				// step one tree-level up
				currentSibling = currentSibling.eContainer
			}
		}
		
		
		Scopes::scopeFor(candidates, this.getQualifiedNameProvider, IScope::NULLSCOPE)
	}
}