/*
 * generated by Xtext 2.28.0
 */
package org.xtext.lua.tests

import javax.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.lua.lua.Chunk

@ExtendWith(InjectionExtension)
@InjectWith(LuaInjectorProvider)
class LuaScopingTest {
	@Inject extension ParseHelper<Chunk>
	@Inject extension ValidationTestHelper
	
	
	val successSrc = #{
		// Uses qualified name for crossref
		'''
		Foo = {
			bar = {
				baz = 42
			}
		}
		
		result = Foo.bar.baz
		'''
		,
		// global function
		'''
		function foo(...)
		end

		foo()
		result = foo()
		'''
		, 
		// local function
		'''
		local function foo(...)
		end

		foo()
		result = foo()
		'''
		,
		// Multi Assignments
		'''
		foo, bar = 42, 43
		'''
	}

	val failureSrc = #{
		// no self reference
		'''
		hello = hello
		'''
		,
		// no access to uncalled function
		'''
		local function foo(...)
			local bar = 42
		end
		
		result = foo.bar
		'''
		,
		// no access to uncalled function
		'''
		local function foo(...)
			local bar = 42
		end
		
		result = bar
		'''
		,
		// Cannot declare a qualified function without declaring the table first
		'''
		function Foo.bar(...)
		end
		'''
	}

	@Test
	def void testSuccessfulScoping() {
		val falseNegs = newArrayList
		successSrc.forEach[
			val result = parse(it)
			val errors = result.eResource.errors
			if (!errors.isEmpty)
				falseNegs.add('''Unexpected errors:
				«errors.join(", ")»
				in:
				«it»
				''')
			assertNoIssues(result)
		]
		Assertions.assertTrue(falseNegs.isEmpty, '''There were false negatives:
		«falseNegs.join('\n')»
		''') 
	}

	@Test
	def void testFailureScoping() {
		val falsePositives = newArrayList
		failureSrc.forEach[
			val result = parse(it)
			val errors = result.eResource.errors
//			ValidationTestHelper.assertIssue(result, Chunk.eClass, "Foo", Severity.INFO)

//			assertIssue(result, result.eClass,)


			if (errors.isEmpty)
				falsePositives.add('''Missing expected errors in:
				«it»
				''')
		]
		Assertions.assertTrue(falsePositives.isEmpty, '''There were false positives:
		«falsePositives.join('\n')»
		''') 
	}

}
