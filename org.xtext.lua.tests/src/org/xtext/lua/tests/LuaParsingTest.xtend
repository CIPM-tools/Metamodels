/*
 * generated by Xtext 2.28.0
 */
package org.xtext.lua.tests

import com.google.inject.Provider
import java.io.ByteArrayOutputStream
import java.nio.file.Files
import java.nio.file.Paths
import javax.inject.Inject
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.lua.LuaStandaloneSetup
import org.xtext.lua.lua.Chunk
import java.nio.file.FileSystems

@ExtendWith(InjectionExtension)
@InjectWith(LuaInjectorProvider)
class LuaParsingTest {
	@Inject
	ParseHelper<Chunk> parseHelper
	
	@Inject
	Provider<XtextResourceSet> resourceSetProvider
	
	val luaSnippet = '''
		num = 666
		
		local function foo()
			print("foo bar")
			num = num + 1
		end
		
		foo()
		eq = num == 667
	'''

	@Test
	def void loadModel() {
		val result = parseHelper.parse(luaSnippet)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void printModel() {
		val result = parseHelper.parse(luaSnippet)

		val outputStream = new ByteArrayOutputStream()
		val saveOptions = emptyMap
		result.eResource.save(outputStream, saveOptions)
		Assertions.assertEquals(outputStream.toString(), luaSnippet)
	}

	/*
	 * Comments are currently not serialized!
	 */
	@Test
	def void printModelWithComment() {

		val luaSnippetWithComment = '''
			num = 666
			
			-- A comment above a local function declaration
			local function foo()
				print("foo bar")
				num = num + 1
			end
			
			foo()
			eq = num == 667
		'''
		val result = parseHelper.parse(luaSnippetWithComment)

		val outputStream = new ByteArrayOutputStream()
		val saveOptions = emptyMap
		result.eResource.save(outputStream, saveOptions)
		Assertions.assertNotEquals(outputStream.toString(), luaSnippetWithComment)
	}
	
	@Test
	def void testXMIexport() {
//		Setting the path like this did not work surprisingly: 
//		new StandaloneSetup().platformUri = "./test-data/"

		val injector = new LuaStandaloneSetup().createInjectorAndDoEMFRegistration()
		var XtextResourceSet rs = injector.getInstance(XtextResourceSet)
		var Resource r1 = rs.getResource(URI.createURI("./test-data/foo.lua"), true)
		r1.load(null);
		var Resource r2 = rs.createResource(URI.createURI("./test-data/foo.xmi"));
		r2.getContents().add(r1.getContents().get(0));
		r2.save(null);
	}

		@Test
	def void testDirectoryParsing() {
		val rs = resourceSetProvider.get()
		val appPath = Paths.get("../caseStudy1")
		val matcher = FileSystems.^default.getPathMatcher("glob:**.lua")

		try (val paths = Files.walk(appPath))
			paths
				.filter[p | matcher.matches(p)]
				.map[p | URI.createURI(p.toString)] // this is not the same as `p.toUri()` !
				.forEach[u | rs.getResource(u, true)]
		
		// print the resources
//		rs.resources.forEach[r | println(r)]
		val resource = rs.resources.get(0)
		val contents = resource.allContents
		println("Contents of the first resource:")
		contents.forEach[o | println(o)]

		
//		var Resource r2 = rs.createResource(URI.createURI("./test-data/caseStudy1.xmi"));
//		r2.getContents().add(allResources);
//		r2.save(null);
			
		
//		var Resource r1 = rs.getResource(URI.createURI("foo.lua"), true)
//		r1.load(null);
//		var Resource r2 = rs.createResource(URI.createURI("foo.xmi"));
//		r2.getContents().add(r1.getContents().get(0));
//		r2.save(null);
	}
}
